/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.demograft.ldb4rdbconverter.generated;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LocationRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1064671562205682447L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LocationRecord\",\"namespace\":\"com.demograft.ldb4rdbconverter.generated\",\"fields\":[{\"name\":\"lon\",\"type\":\"double\"},{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"ueBrandName\",\"type\":\"string\"},{\"name\":\"networkType\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double lon;
  @Deprecated public double lat;
  @Deprecated public long time;
  @Deprecated public java.lang.CharSequence ueBrandName;
  @Deprecated public java.lang.CharSequence networkType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LocationRecord() {}

  /**
   * All-args constructor.
   * @param lon The new value for lon
   * @param lat The new value for lat
   * @param time The new value for time
   * @param ueBrandName The new value for ueBrandName
   * @param networkType The new value for networkType
   */
  public LocationRecord(java.lang.Double lon, java.lang.Double lat, java.lang.Long time, java.lang.CharSequence ueBrandName, java.lang.CharSequence networkType) {
    this.lon = lon;
    this.lat = lat;
    this.time = time;
    this.ueBrandName = ueBrandName;
    this.networkType = networkType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lon;
    case 1: return lat;
    case 2: return time;
    case 3: return ueBrandName;
    case 4: return networkType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lon = (java.lang.Double)value$; break;
    case 1: lat = (java.lang.Double)value$; break;
    case 2: time = (java.lang.Long)value$; break;
    case 3: ueBrandName = (java.lang.CharSequence)value$; break;
    case 4: networkType = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'lon' field.
   * @return The value of the 'lon' field.
   */
  public java.lang.Double getLon() {
    return lon;
  }

  /**
   * Sets the value of the 'lon' field.
   * @param value the value to set.
   */
  public void setLon(java.lang.Double value) {
    this.lon = value;
  }

  /**
   * Gets the value of the 'lat' field.
   * @return The value of the 'lat' field.
   */
  public java.lang.Double getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * @param value the value to set.
   */
  public void setLat(java.lang.Double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'ueBrandName' field.
   * @return The value of the 'ueBrandName' field.
   */
  public java.lang.CharSequence getUeBrandName() {
    return ueBrandName;
  }

  /**
   * Sets the value of the 'ueBrandName' field.
   * @param value the value to set.
   */
  public void setUeBrandName(java.lang.CharSequence value) {
    this.ueBrandName = value;
  }

  /**
   * Gets the value of the 'networkType' field.
   * @return The value of the 'networkType' field.
   */
  public java.lang.CharSequence getNetworkType() {
    return networkType;
  }

  /**
   * Sets the value of the 'networkType' field.
   * @param value the value to set.
   */
  public void setNetworkType(java.lang.CharSequence value) {
    this.networkType = value;
  }

  /**
   * Creates a new LocationRecord RecordBuilder.
   * @return A new LocationRecord RecordBuilder
   */
  public static com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder newBuilder() {
    return new com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder();
  }

  /**
   * Creates a new LocationRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LocationRecord RecordBuilder
   */
  public static com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder newBuilder(com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder other) {
    return new com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder(other);
  }

  /**
   * Creates a new LocationRecord RecordBuilder by copying an existing LocationRecord instance.
   * @param other The existing instance to copy.
   * @return A new LocationRecord RecordBuilder
   */
  public static com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder newBuilder(com.demograft.ldb4rdbconverter.generated.LocationRecord other) {
    return new com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder(other);
  }

  /**
   * RecordBuilder for LocationRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LocationRecord>
    implements org.apache.avro.data.RecordBuilder<LocationRecord> {

    private double lon;
    private double lat;
    private long time;
    private java.lang.CharSequence ueBrandName;
    private java.lang.CharSequence networkType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lon)) {
        this.lon = data().deepCopy(fields()[0].schema(), other.lon);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lat)) {
        this.lat = data().deepCopy(fields()[1].schema(), other.lat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ueBrandName)) {
        this.ueBrandName = data().deepCopy(fields()[3].schema(), other.ueBrandName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.networkType)) {
        this.networkType = data().deepCopy(fields()[4].schema(), other.networkType);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LocationRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.demograft.ldb4rdbconverter.generated.LocationRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.lon)) {
        this.lon = data().deepCopy(fields()[0].schema(), other.lon);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lat)) {
        this.lat = data().deepCopy(fields()[1].schema(), other.lat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ueBrandName)) {
        this.ueBrandName = data().deepCopy(fields()[3].schema(), other.ueBrandName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.networkType)) {
        this.networkType = data().deepCopy(fields()[4].schema(), other.networkType);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'lon' field.
      * @return The value.
      */
    public java.lang.Double getLon() {
      return lon;
    }

    /**
      * Sets the value of the 'lon' field.
      * @param value The value of 'lon'.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder setLon(double value) {
      validate(fields()[0], value);
      this.lon = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lon' field has been set.
      * @return True if the 'lon' field has been set, false otherwise.
      */
    public boolean hasLon() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lon' field.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder clearLon() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lat' field.
      * @return The value.
      */
    public java.lang.Double getLat() {
      return lat;
    }

    /**
      * Sets the value of the 'lat' field.
      * @param value The value of 'lat'.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder setLat(double value) {
      validate(fields()[1], value);
      this.lat = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lat' field has been set.
      * @return True if the 'lat' field has been set, false otherwise.
      */
    public boolean hasLat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lat' field.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder clearLat() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder setTime(long value) {
      validate(fields()[2], value);
      this.time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder clearTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ueBrandName' field.
      * @return The value.
      */
    public java.lang.CharSequence getUeBrandName() {
      return ueBrandName;
    }

    /**
      * Sets the value of the 'ueBrandName' field.
      * @param value The value of 'ueBrandName'.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder setUeBrandName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.ueBrandName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ueBrandName' field has been set.
      * @return True if the 'ueBrandName' field has been set, false otherwise.
      */
    public boolean hasUeBrandName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ueBrandName' field.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder clearUeBrandName() {
      ueBrandName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'networkType' field.
      * @return The value.
      */
    public java.lang.CharSequence getNetworkType() {
      return networkType;
    }

    /**
      * Sets the value of the 'networkType' field.
      * @param value The value of 'networkType'.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder setNetworkType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.networkType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'networkType' field has been set.
      * @return True if the 'networkType' field has been set, false otherwise.
      */
    public boolean hasNetworkType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'networkType' field.
      * @return This builder.
      */
    public com.demograft.ldb4rdbconverter.generated.LocationRecord.Builder clearNetworkType() {
      networkType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public LocationRecord build() {
      try {
        LocationRecord record = new LocationRecord();
        record.lon = fieldSetFlags()[0] ? this.lon : (java.lang.Double) defaultValue(fields()[0]);
        record.lat = fieldSetFlags()[1] ? this.lat : (java.lang.Double) defaultValue(fields()[1]);
        record.time = fieldSetFlags()[2] ? this.time : (java.lang.Long) defaultValue(fields()[2]);
        record.ueBrandName = fieldSetFlags()[3] ? this.ueBrandName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.networkType = fieldSetFlags()[4] ? this.networkType : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
